From 23a65607b011582e11be1ed4be5c309da14bf4d6 Mon Sep 17 00:00:00 2001
From: Simon McVittie <simon.mcvittie@collabora.co.uk>
Date: Sun, 21 Apr 2013 12:42:31 +0100
Subject: [PATCH] Reinstate support for suspending via UPower

Debian's logind is currently too old to know how to suspend
(Debian #704272).

Also delay suspend by 1 second, in the hope that this will avoid showing
the old screen contents after resume (Debian #645716). With a newer
logind, inhibiting suspend will fix this properly.

Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=704272
---
 js/misc/loginManager.js |   33 +++++++++++++++++++++++++--------
 1 file changed, 25 insertions(+), 8 deletions(-)

diff --git a/js/misc/loginManager.js b/js/misc/loginManager.js
index ce4af41..280e478 100644
--- a/js/misc/loginManager.js
+++ b/js/misc/loginManager.js
@@ -5,6 +5,7 @@ const Gio = imports.gi.Gio;
 const Lang = imports.lang;
 const Mainloop = imports.mainloop;
 const Shell = imports.gi.Shell;
+const UPowerGlib = imports.gi.UPowerGlib;
 const Signals = imports.signals;
 
 const SystemdLoginManagerIface = <interface name='org.freedesktop.login1.Manager'>
@@ -135,6 +136,7 @@ const LoginManagerSystemd = new Lang.Class({
                                               '/org/freedesktop/login1');
         this._proxy.connectSignal('PrepareForSleep',
                                   Lang.bind(this, this._prepareForSleep));
+        this._upClient = new UPowerGlib.Client();
     },
 
     // Having this function is a bit of a hack since the Systemd and ConsoleKit
@@ -178,12 +180,10 @@ const LoginManagerSystemd = new Lang.Class({
     },
 
     canSuspend: function(asyncCallback) {
-        this._proxy.CanSuspendRemote(function(result, error) {
-            if (error)
-                asyncCallback(false);
-            else
-                asyncCallback(result[0] != 'no');
-        });
+        Mainloop.idle_add(Lang.bind(this, function() {
+            asyncCallback(this._upClient.get_can_suspend());
+            return false;
+        }));
     },
 
     listSessions: function(asyncCallback) {
@@ -204,7 +204,14 @@ const LoginManagerSystemd = new Lang.Class({
     },
 
     suspend: function() {
-        this._proxy.SuspendRemote(true);
+        this.emit('prepare-for-sleep', true);
+        this.emit('prepare-for-sleep', false);
+	// hack: wait 1 second, by which time the screen will hopefully
+	// have finished locking
+        Mainloop.timeout_add(1000, Lang.bind(this, function() {
+            this._upClient.suspend_sync(null);
+            return false;
+        }));
     },
 
     inhibit: function(reason, callback) {
@@ -240,6 +247,7 @@ const LoginManagerConsoleKit = new Lang.Class({
         this._proxy = new ConsoleKitManager(Gio.DBus.system,
                                             'org.freedesktop.ConsoleKit',
                                             '/org/freedesktop/ConsoleKit/Manager');
+        this._upClient = new UPowerGlib.Client();
     },
 
     // Having this function is a bit of a hack since the Systemd and ConsoleKit
@@ -283,7 +291,10 @@ const LoginManagerConsoleKit = new Lang.Class({
     },
 
     canSuspend: function(asyncCallback) {
-        asyncCallback(false);
+        Mainloop.idle_add(Lang.bind(this, function() {
+            asyncCallback(this._upClient.get_can_suspend());
+            return false;
+        }));
     },
 
     listSessions: function(asyncCallback) {
@@ -301,6 +312,12 @@ const LoginManagerConsoleKit = new Lang.Class({
     suspend: function() {
         this.emit('prepare-for-sleep', true);
         this.emit('prepare-for-sleep', false);
+	// hack: wait 1 second, by which time the screen will hopefully
+	// have finished locking
+        Mainloop.timeout_add(1000, Lang.bind(this, function() {
+            this._upClient.suspend_sync(null);
+            return false;
+        }));
     },
 
     inhibit: function(reason, callback) {
-- 
1.7.10.4

